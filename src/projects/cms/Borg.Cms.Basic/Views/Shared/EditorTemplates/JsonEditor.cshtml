@using Borg.MVC.Services.Editors
@using Newtonsoft.Json
@model JsonEditor
<input type="hidden" asp-for="HtmlId" />

@{
    var templ = @" {
text: 'Tiding',
title: 'Insert a Tiding',
className: 'jsoneditor-type-object',
field: 'TidingTemplate',
value: {
Key: '',
Value: '',
Weight: 0.1,
Depth: 0,
HumanKey: '',
Hint: '',
Flag: ''
}";
    if (Model.Template != null)
    {
        templ = JsonConvert.SerializeObject(Model.Template);
    }
}

<div class="form-group" id="@Model.HtmlId">
    @if (!Model.HideLabel)
    {
        <label asp-for="@Model"></label>

    }
    <input type="hidden" asp-for="Value" class="form-control hidden" id="@(Model.HtmlId)_jsonValueBox" />
    <span asp-validation-for="Value" class="text-danger"></span>
    <div id="@(Model.HtmlId)_jsoneditor" style="min-height: 400px; height: 400px;"></div>
</div>


<script device id="@(Model.HtmlId)_script">
        $(function () {

            var temp = JSON.parse('@Html.Raw(templ)');
            var temps = [temp];
            var container = document.getElementById('@Model.HtmlId' + '_jsoneditor');
            var editor = "undefined";
            var options = {
                modes: ['text', 'code', 'tree', 'form', 'view'],
                mode: 'tree',
                ace: ace,
                search: false,
                sortObjectKeys: true,
                onChange: function () {
                    if (editor != "undefined") {
                    var json = editor.getText();
                    $('#' + '@Model.HtmlId' + '_jsonValueBox').val(json);
                    }
                },
                templates: temps
            }

            editor = new JSONEditor(container, options, @Html.Raw(Model.Value));



        })
</script>