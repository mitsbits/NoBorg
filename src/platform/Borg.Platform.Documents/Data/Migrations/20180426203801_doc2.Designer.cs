// <auto-generated />
using Borg.Infra.Storage.Assets.Contracts;
using Borg.Platform.Documents.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Borg.Platform.Documents.Data.Migrations
{
    [DbContext(typeof(DocumentsDbContext))]
    [Migration("20180426203801_doc2")]
    partial class doc2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("Relational:Sequence:assets.AssetsSQC", "'AssetsSQC', 'assets', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:assets.FilesSQC", "'FilesSQC', 'assets', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:assets.VersionsSQC", "'VersionsSQC', 'assets', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.AssetState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR assets.AssetsSQC");

                    b.Property<int>("CurrentVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("DocumentBehaviourState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("")
                        .HasMaxLength(512);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("AssetRecords","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.DocumentCheckOutState", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<string>("CheckedOutBy")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("CheckedOutOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CheckOutVersion");

                    b.Property<bool>("CheckedIn");

                    b.Property<string>("CheckedInBy")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("CheckedinOn");

                    b.HasKey("DocumentId", "CheckedOutBy", "CheckedOutOn")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CheckedOutOn")
                        .HasName("IX_DocumentCheckOutState_CheckedOutOn");

                    b.ToTable("DocumentCheckOutStates","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.DocumentOwnerState", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<string>("Owner")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("AssociatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("DocumentId", "Owner")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("AssociatedOn")
                        .HasName("IX_DocumentOwnerState_AssociatedOn");

                    b.ToTable("DocumentOwnerStates","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.DocumentState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("DocumentStates","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.FileState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR assets.FilesSQC");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasDefaultValue("")
                        .HasMaxLength(64);

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("")
                        .HasMaxLength(1024)
                        .IsUnicode(true);

                    b.Property<DateTime?>("LastRead");

                    b.Property<DateTime>("LastWrite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("")
                        .HasMaxLength(512);

                    b.Property<long>("SizeInBytes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Extension")
                        .HasName("IX_FileRecord_Extension");

                    b.HasIndex("FullPath")
                        .HasName("IX_File_FullPath");

                    b.ToTable("FileRecords","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.MimeTypeGroupingExtensionState", b =>
                {
                    b.Property<int>("MimeTypeGroupingId");

                    b.Property<string>("Extension")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.HasKey("MimeTypeGroupingId", "Extension")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("MimeTypeGroupingExtensionStates","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.MimeTypeGroupingState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_MimeTypeGrouping_Name");

                    b.ToTable("MimeTypeGroupingStates","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.MimeTypeState", b =>
                {
                    b.Property<string>("Extension")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.HasKey("Extension")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("MimeTypeRecords","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.VersionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR assets.VersionsSQC");

                    b.Property<int>("AssetRecordId");

                    b.Property<int>("FileRecordId");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("FileRecordId")
                        .HasName("IX_Version_FileRecordId");

                    b.HasIndex("Version")
                        .HasName("IX_Version_Version");

                    b.HasIndex("AssetRecordId", "Version", "FileRecordId")
                        .IsUnique()
                        .HasName("PK_Version_Asset");

                    b.ToTable("VersionRecords","documents");
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.DocumentCheckOutState", b =>
                {
                    b.HasOne("Borg.Platform.Documents.Data.Entities.DocumentState", "Document")
                        .WithMany("CheckOuts")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Documents_CheckOuts")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.DocumentOwnerState", b =>
                {
                    b.HasOne("Borg.Platform.Documents.Data.Entities.DocumentState", "Document")
                        .WithMany("Owners")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Document_Owners")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.FileState", b =>
                {
                    b.HasOne("Borg.Platform.Documents.Data.Entities.MimeTypeState", "MimeTypeState")
                        .WithMany("Files")
                        .HasForeignKey("Extension")
                        .HasConstraintName("FK_MimeTypes_Records")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.MimeTypeGroupingExtensionState", b =>
                {
                    b.HasOne("Borg.Platform.Documents.Data.Entities.MimeTypeGroupingState", "MimeTypeGrouping")
                        .WithMany("Extensions")
                        .HasForeignKey("MimeTypeGroupingId")
                        .HasConstraintName("FK_Grouping_Extension")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Borg.Platform.Documents.Data.Entities.VersionState", b =>
                {
                    b.HasOne("Borg.Platform.Documents.Data.Entities.AssetState", "AssetState")
                        .WithMany("Versions")
                        .HasForeignKey("AssetRecordId")
                        .HasConstraintName("FK_Asset_Version")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Borg.Platform.Documents.Data.Entities.FileState", "FileState")
                        .WithOne("VersionState")
                        .HasForeignKey("Borg.Platform.Documents.Data.Entities.VersionState", "FileRecordId")
                        .HasConstraintName("FK_Version_File")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
